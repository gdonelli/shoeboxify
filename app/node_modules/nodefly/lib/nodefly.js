if (global.nodefly) return global.nodefly;

var config = global.config = require('./config');

var fs      = require('fs');
var util    = require('util');
var path    = require('path');
var events  = require('events');
var os      = require('os');

var proxy   = require('./proxy');
var sender  = require('./sender');
var samples = require('./samples');
var catcher = require('./catcher');
var info    = require('./info');
var metrics = require('./metrics');

var timekit
if (os.platform() === 'win32') {
	console.warn('[NodeFly] Timekit does not output correct time on Windows -- It will not be used');
}else{
	try {
		timekit = require('timekit');
	}catch(exp){
		console.warn('[NodeFly] Timekit Module is Not Installed');
	}
}

var tiers = require('./tiers');
var queue = require('./queue');
var io = require('socket.io-client');

var package = require('../package.json');

var UrlAggregator = require('./UrlAggregator'); 


var Nodefly = function()
{
	this.sessionId = null;
	this.debug = true;
	var self = this;
	this.cpuinfo = require('./cpuinfo');

	// old way
	this.urlAgg = new UrlAggregator();
	this.externalAgg = new UrlAggregator();

	// new way
	this.aggregators = {};
	this.aggregators['mysqlCalls'] = new UrlAggregator();
	this.aggregators['mongoCalls'] = new UrlAggregator();
	this.aggregators['redisCalls'] = new UrlAggregator();
	this.aggregators['memcacheCalls'] = new UrlAggregator();

	events.EventEmitter.call(this);
};

util.inherits(Nodefly, events.EventEmitter);

exports = module.exports = global.nodefly = new Nodefly();

Nodefly.prototype.profile = function(key, appName, options) {
	var self = this;
	
	if (typeof options === 'undefined') {
		options = {};
	}
	
	this.key = key;
	
	if(appName instanceof Array){
		this.appName  = appName.shift()
		this.hostname = appName.join(':')
	}else{
		this.appName  = appName;
		this.hostname = os.hostname()
	}
	
	this.blockThreshold = options.blockThreshold || config.blockThreshold || 10;
	this.initialized = true;

	proxy.init();
	sender.init();
	samples.init();
	catcher.init();
	info.init();
	metrics.init();
	tiers.init();
	queue.init();
	

	if(timekit){
		this.timekit = timekit;
		this.timekit_time    = !!timekit.time();
		this.timekit_cputime = !!timekit.cputime();
	}

	// prepare probes
	var probes = {};
	var files = fs.readdirSync(path.dirname(require.resolve('./nodefly')) + '/probes');

	files.forEach(function(file) {
		var m = file.match('^(.*)+\.js$');
		if (m && m.length == 2) probes[m[1]] = true;
	});

	// init probes
	proxy.after(module.__proto__, 'require', function(obj, args, ret) {
		if (ret.__required__) return;
		if (probes[args[0]]) {
			ret.__required__ = true; 
			require('./probes/' + args[0])(ret);
		}
	});
	
	var socket = this.socket = io.connect(config.server);

	socket.on('connect', function(data) {		
		self.sessionId = null;
		
		self.socket.emit('createSession',{
			hostname: self.hostname,
			appName: self.appName,
			key: self.key,
			agentVersion: package.version
		});
	});


	socket.on('newSession', function(data) {
		//console.log("session started with appHash %s, talking to %s", data.appHash, config.server);
		self.sessionId = data.sessionId;
		self.appHash = data.appHash;
		
		
		if (self.expressAgg) {
			self.expressAgg.removeAllListeners('update');
			self.expressAgg.on('update', function(data){
				self.socket.emit('topFunctions', { appHash: self.appHash, update: data });
			});			
		}
		else if (self.urlAgg) {
			self.urlAgg.removeAllListeners('update');
			self.urlAgg.on('update', function(data){
				self.socket.emit('topFunctions', { appHash: self.appHash, update: data });
			});
		}
	});

}

Nodefly.prototype.time = function(label, context) {
  if(this.paused || !this.initialized) return;

  this.times[label] = {
    time: samples.time("Custom", label, true),
    stackTrace: samples.stackTrace(),
    context: context
  };
};


Nodefly.prototype.timeEnd = function(label, context) {
  if(this.paused || !this.initialized) return;

  var time = this.times[label];
  delete this.times[label];
  if(!time) throw new Error('No such label: ' + label);

  if(!time.time.done()) return;

  var obj = {'Type': 'Custom'};
  
  // merge start context
  if(time.context) {
    for(var prop in time.context) {
      obj[prop] = time.context[prop];
    }
  }

  // merge end context
  if(context) {
    for(var prop in context) {
      obj[prop] = context[prop];
    }
  }

  // add stack trace
  obj['Stack trace'] = time.stackTrace;

  samples.add(time.time, obj, 'Custom: ' + label);
};


Nodefly.prototype.metric = function(scope, name, value, unit, op, persist) {
  if(!this.initialized) return;
  metrics.add(scope, name, value, unit, op, persist);
};


Nodefly.prototype.hrtime = function() {
  if(this.timekit_time) {
    return this.timekit.time();
  }
  else if(this.hasHrtime) {
    var ht = process.hrtime();
    return ht[0] * 1000000 + Math.round(ht[1] / 1000);
  }
  else {
    return new Date().getTime() * 1000;
  }
};


Nodefly.prototype.micros = function() {
  return this.timekit_time ? this.timekit.time() : new Date().getTime() * 1000;
};


Nodefly.prototype.millis = function() {
  return this.timekit_time ? this.timekit.time() / 1000 : new Date().getTime();
};


Nodefly.prototype.cputime = function() {
  return this.timekit_cputime ? this.timekit.cputime() : undefined;
};


Nodefly.prototype.log = function(msg) {
  if(this.debug && msg) console.log('nodefly:', msg);
};


Nodefly.prototype.error = function(e) {
  if(this.debug && e) console.error('nodefly error:', e, e.stack);
};


Nodefly.prototype.dump = function(obj) {
  if(this.debug) console.log(util.inspect(obj, false, 10, true));
};


Nodefly.prototype.message = function(msg) {
  util.log("\033[1;31mNodefly:\033[0m " + msg);
};
