/*
 * Copyright (c) 2012 Dmitri Melikyan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including 
 * without limitation the rights to use, copy, modify, merge, publish, 
 * distribute, sublicense, and/or sell copies of the Software, and to permit 
 * persons to whom the Software is furnished to do so, subject to the 
 * following conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN 
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var nf;
var _ = require('underscore');

var infoBuffer;
var metricsBuffer = [];
var samplesBuffer = [];
var tiersBuffer = [];

exports.init = function() {
	nf = global.nodefly;

	nf.on('info', function(info) {
		if(!nf.headless)
			infoBuffer = info;
	});

	nf.on('metric', function(metric) {
		if(!nf.headless)
			metricsBuffer.push(metric);
	});

	nf.on('sample', function(sample) {
		if(!nf.headless && nf.sessionId) {
			samplesBuffer.push(sample);
		}
	});

	nf.on('tiers', function(stats) {
		if(!nf.headless && nf.sessionId)
			tiersBuffer.push(stats);
	});
	
	// old way
	nf.externalAgg.on('update', function(data){
		nf.socket.emit('externalCalls', { appHash: nf.appHash, update: data });
	});

	// new way
	_.each(nf.aggregators, function(agg, key) {
		agg.on('update', function(data) {
			nf.socket.emit('functions', { appHash: nf.appHash, key: key, update: data });
		});
	});


	setInterval(function() {
		try {
			sendInfo();
			sendMetrics();
			sendSamples();
			sendTiers();
			//sendQueue();
		}
		catch(e) {
			nf.error(e);
		}
	}, 1000);

	// empty buffer if no sessionId for more than 30 sec
	setInterval(function() {
		try {
			if(!nf.sessionId) 
				metricsBuffer = [];
		}
		catch(e) {
			nf.error(e);
		}
	}, 2*1000);
};


var sendInfo = function() {
	if(!nf.sessionId || !infoBuffer) { 
		return;
	}

	nf.socket.emit('update', infoBuffer);
	infoBuffer = undefined;
};


var sendMetrics = function() {
	if(!nf.sessionId || metricsBuffer.length == 0) {
		return;
	}

	metricsBuffer.forEach(function(metric) {
		nf.socket.emit('update', metric);
	});

	metricsBuffer = [];
};


var sendTiers = function() {
	if(!nf.sessionId || tiersBuffer.length == 0) {
		return;
	}

	tiersBuffer.forEach(function(stats) {
		nf.socket.emit('update', stats);
	});

	tiersBuffer = [];
};


var sendSamples = function() {
	if(!nf.sessionId || samplesBuffer.length == 0) {
		return;
	}

	// send slowest macro samples
	var macroOps = samplesBuffer.filter(function(sample) {
		return sample.isMacro;
	});

	var macroOps = macroOps.sort(function(a, b) {
		return b._ms - a._ms;
	});

	for(var i = 0; i < (macroOps.length < 10 ? macroOps.length : 10); i++) {
		nf.socket.emit('update', macroOps[i]);
	}

	// send slowest non-macro samples
	var simpleOps = samplesBuffer.filter(function(sample) {
		return !sample.isMacro;
	});

	var simpleOps = simpleOps.sort(function(a, b) {
		return b._ms - a._ms;
	});

	for(var i = 0; i < (simpleOps.length < 10 ? simpleOps.length : 10); i++) {
		nf.socket.emit('update', simpleOps[i]);
	}

	samplesBuffer = [];
};


